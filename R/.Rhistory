collect()
ch
ch <- gbif %>%
filter(taxonkey == 1427008, year > 2010) %>%
collect()
ch <- gbif %>%
filter(id == 35597, year > 2010) %>%
collect()
ch <- gbif %>%
filter(taxonkey == 35597, year > 2010) %>%
collect()
ch <- gbif %>%
filter(speciesKey == 2469028, year > 2010) %>%
collect()
ch <- gbif %>%
filter(taxonKey == 2469028, year > 2010) %>%
collect()
ch <- gbif %>%
filter(taxonkey == 2469028, year > 2010) %>%
collect()
gbif %>%
filter(phylum == "Chordata", year > 1990) %>%
count(class, year) %>%
collect()
gbif <- gbif_remote() %>%
select(phylum, year)
gbif %>%
filter(phylum == "Chordata", year > 1990) %>%
count(class, year) %>%
collect()
gbif %>%
filter(phylum == "Chordata", year > 1990) %>%
count(year) %>%
collect()
gbif$phylum
library(arrow)
library(dplyr)
gbif_snapshot <- "s3://gbif-open-data-eu-central-1/occurrence/2024-02-01/occurrence.parquet"
df <- open_dataset(gbif_snapshot)
head(df)
df <- open_dataset(gbif_snapshot) %>%
select(genus)
head(df)
x <- df %>%
filter(class == "Calopteryx", year > 2023) %>% collect()
x <- df %>%
filter(genus == "Calopteryx", year > 2023) %>% collect()
x <- df %>%
filter(genus == "Calopteryx", year > 2022) %>% collect()
x <- df %>%
filter(genus == "Calopteryx", year > 1990) %>% collect()
x <- df %>%
filter(genus == "Calopteryx") %>% collect()
install.packages("palmerpenguins")
# Load package
library(palmerpenguins)
head(penguins)
colors2 <- c("red", "blue")
penguins
data("penguins")
force(penguins)
View(penguins)
adelie <- penguins$bill_length_mm[penguins$species == "Adelie"]
chinstrap <- penguins$bill_length_mm[penguins$species == "Chinstrap"]
gentoo <- penguins$bill_length_mm[penguins$species == "Gentoo"]
par(mfrow=c(1,3))
hist(adelie, main = "Adelie histogram", col = colors[1], ylim = c(0, 40))
colors <- c("#FDAE61", "#D9EF8B", "#66BD63")
par(mfrow=c(1,3))
hist(adelie, main = "Adelie histogram", col = colors[1], ylim = c(0, 40))
abline(v = c(median(adelie, na.rm = TRUE), mean(adelie, na.rm = TRUE)), col = colors2)
hist(chinstrap, main = "Chinstrap histogram", col = colors[2], ylim = c(0, 40))
abline(v = c(median(chinstrap, na.rm = TRUE), mean(chinstrap, na.rm = TRUE)), col = colors2)
hist(gentoo, main = "Gentoo histogram", col = colors[3], ylim = c(0, 40))
abline(v = c(median(gentoo, na.rm = TRUE), mean(gentoo, na.rm = TRUE)), col = colors2)
adelie <- penguins$island[penguins$species == "Adelie"]
chinstrap <- penguins$island[penguins$species == "Chinstrap"]
gentoo <- penguins$island[penguins$species == "Gentoo"]
table(adelie)
View(penguins)
adelie <- penguins$island[penguins$species == "Adelie"]
chinstrap <- penguins$island[penguins$species == "Chinstrap"]
gentoo <- penguins$island[penguins$species == "Gentoo"]
par(mfrow=c(1,3))
barplot(table(adelie), main = "Adelie barplot islands", col = colors[1],
horiz = TRUE, xlim = c(0, 120), las = 2, cex.names = 0.7)
barplot(table(chinstrap), main = "Chinstrap barplot islands", col = colors[2],
horiz = TRUE, xlim = c(0, 120), las = 2, cex.names = 0.7)
barplot(table(gentoo), main = "Gentoo barplot islands", col = colors[3],
horiz = TRUE, xlim = c(0, 120), las = 2, cex.names = 0.7)
barplot(table(adelie), main = "Adelie barplot islands", col = colors[1],
horiz = F, xlim = c(0, 120), las = 2, cex.names = 0.7)
adelie <- penguins$bill_length_mm[penguins$species == "Adelie"]
dev.off()
ad.med <- median(adelie, na.rm = TRUE)
ad.med
q1 <- median(adelie[adelie < ad.med], na.rm = TRUE)
q3 <- median(adelie[adelie > ad.med], na.rm = TRUE)
quantile(adelie, na.rm = TRUE)
boxplot(adelie, main = "Adelie boxplot")
abline(h = ad.med, col = "red")
abline(h = c(q1, q3), col = "blue")
abline(h = c(min(adelie, na.rm = T), max(adelie, na.rm = T)), col = "green")
boxplot(penguins$bill_length_mm ~ penguins$species,
col = colors, xlab = "", ylab = "Bill length (mm)",
main = "Penguins boxplot")
for(i in 1:3){
jittered_x <- rep(i, nrow(penguins))
jittered_x <- jittered_x + runif(nrow(penguins), min = -0.1, max = 0.1)
points(jittered_x, penguins$bill_length_mm,
pch = 19, col = adjustcolor("black", alpha = 0.2), cex = 0.6)
}
i=1
rep(i, nrow(penguins))
nrow(penguins)
jittered_x <- rep(i, nrow(penguins))
jittered_x
unique(penguins$species)
unique(penguins$species)[1]
level(unique(penguins$species)[1])
levels(unique(penguins$species)[1])
levels(unique(penguins$species))[1]
jittered_x <- rep(i, nrow(penguins$species == i))
penguins$species == i
levels(penguins$species)
rep(i, nrow(penguins$species == i))
for(i in levels(penguins$species)){
print(i)
}
rep(i, length(penguins$species == i))
jittered_x <- rep(i, length(penguins$species == i))
View(penguins)
penguins$species == i
rep(i, sum(penguins$species == i))
jittered_x <- rep(i, sum(penguins$species == i))
runif(nrow(penguins), min = -0.1, max = 0.1)
boxplot(penguins$bill_length_mm ~ penguins$species,
col = colors, xlab = "", ylab = "Bill length (mm)",
main = "Penguins boxplot")
# Add jittered points
for(i in 1:3){
jittered_x <- rep(i, nrow(penguins))
jittered_x <- jittered_x + runif(nrow(penguins), min = -0.1, max = 0.1)
points(jittered_x, penguins$bill_length_mm,
pch = 19, col = adjustcolor("black", alpha = 0.2), cex = 0.6)
}
sp_1 <- penguins[penguins$species == i, ]
sp_1
i
sp_1 <- penguins[penguins$species == "Gentoo", ]
sp_1
i=1
penguins$species[i]
levels(penguins$species[i])
levels(penguins$species)[i]
sp_1 <- penguins[penguins$species == levels(penguins$species)[i], ]
sp_1
jittered_x <- rep(i, nrow(sp_1))
jittered_x
jittered_x <- jittered_x + runif(nrow(sp_1), min = -0.1, max = 0.1)
points(jittered_x, penguins$bill_length_mm,
pch = 19, col = adjustcolor("black", alpha = 0.2), cex = 0.6)
jittered_x
points(jittered_x, penguins$bill_length_mm[penguins$species == levels(penguins$species)[i]],
pch = 19, col = adjustcolor("black", alpha = 0.2), cex = 0.6)
boxplot(penguins$bill_length_mm ~ penguins$species,
col = colors, xlab = "", ylab = "Bill length (mm)",
main = "Penguins boxplot")
for(i in 1:3){
sp_1 <- penguins[penguins$species == levels(penguins$species)[i], ]
jittered_x <- rep(i, nrow(sp_1))
jittered_x <- jittered_x + runif(nrow(sp_1), min = -0.1, max = 0.1)
points(jittered_x, penguins$bill_length_mm[penguins$species == levels(penguins$species)[i]],
pch = 19, col = adjustcolor("black", alpha = 0.2), cex = 0.6)
}
panel.cor <- function(x, y){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- round(cor(x, y, use = "complete.obs"), digits = 2)
txt <- paste0("R = ", r)
cex.cor = 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
upper.panel <- function(x, y){
points(x, y, pch = 19, cex = 0.5,
col = colors[penguin$species])
}
penguin[ ,2:ncol(penguin)]
penguin <- penguins[ ,c("species", "bill_length_mm", "bill_depth_mm",
"flipper_length_mm", "body_mass_g")]
head(penguin)
penguin[ ,2:ncol(penguin)]
panel.cor
pairs(penguin[ ,2:ncol(penguin)],
main = "Penguin scatter correlation",
lower.panel = panel.cor,
upper.panel = upper.panel)
penguin[ ,2:3]
panel.cor(penguin[ ,2:3])
panel.cor(penguin[ ,2], penguin[ ,3])
panel.cor(penguin[ ,2], penguin[ ,3])
panel.cor(penguin[ ,2], penguin[ ,3])
panel.cor(penguin[ ,2], penguin[ ,3])
library("pacman")
p_load(ggplot2, sf, terra, dplyr, spData, spDataLarge, tmap, grid)
library("pacman")
p_load(ggplot2, sf, terra, dplyr)
setwd("~/Desktop/GitHub/Cursos/R/")
getwd()
df <- read.csv("./occurrenceData/whale_data.csv", sep = "\t")
head(df)
str(df)
attach(df)
kingdom # If we want to see the kingdom column
unique(kingdom) # Unique values
detach(df)
kingdom #
df$kingdom
unique(df$kingdom)
ncol(df)
nrow(df)
unique(df$year)
sort(unique(df$year)) # Increasing
sort(unique(df$year), decreasing = TRUE) # Decreasing
# Check before if in the year columns there are NA values
which(is.na(df$year))
table(df$year)
barplot(table(df$year))
colnames(df)
unique(df$kingdom)
unique(df$phylum)
unique(df$class)
unique(df$order)
unique(df$family)
unique(df$genus)
unique(df$species)
unique(df$taxonRank)
unique(df[c(4:10, 12)])
df.1 <- df
df.1$taxonRank[nrow(df.1)] <- "SUBSPECIES"
unique(df.1[c(4:10, 12)])
rm(df.1)
unique(df$countryCode)
# Distribution
plot(df$decimalLongitude, df$decimalLatitude, pch = 20)
balearic_bat <- rast("./geoData/GEBCO_06_Feb_2024_4cba6c55638e/gebco_2023.tif")
# Change raster name
names(balearic_bat) <- "bathymetry"
balearic_bat
# Plot the raster file
plot(balearic_bat)
points(df$decimalLongitude, df$decimalLatitude, pch = 20)
abline(v = c(0, 5), h = c(38, 41), col = c(rep("blue", 2), rep("red", 2)))
# (length=4; order=xmin, xmax, ymin, ymax)
e <- ext(0, 5, 38, 41)
balearic_bat.crop <- crop(balearic_bat, e)
plot(balearic_bat.crop)
points(df$decimalLongitude, df$decimalLatitude, pch = 20)
# Load .shp file for balearic islands
balearic_shp <- st_read("./geoData/Balearic_Islands/Balearic_4326_simplified.shp")
# Plot shp file
plot(balearic_shp[7])
# Plot bathimetry + Blaearic Islands
plot(balearic_bat.crop)
plot(balearic_shp[7], add = TRUE)
points(df$decimalLongitude, df$decimalLatitude, pch = 20)
# Extraction of depth for each records
depth <- data.frame(extract(x = balearic_bat,
y = df[ ,c("decimalLongitude","decimalLatitude")]))
hist(depth$bathymetry)
depth.kd <- density(depth$bathymetry, na.rm = TRUE)
plot(depth.kd, col = "green")
ggplot() +
geom_density(aes(x = depth$bathymetry), fill = "green", alpha = 0.5) +
theme_bw()
# Load a .csv file -------------------------------------------------------------
df1 <- read.csv("./occurrenceData/Caretta_caretta.csv", sep = "\t")
head(df1)
str(df1)
# Count number of column and rows
ncol(df1)
nrow(df1)
# Check the year of the sampling campaign
sort(unique(df1$year)) # Increasing
# Check before if in the year columns there are NA values
length(which(is.na(df1$year)))
# Count the number of records
barplot(table(df1$year), las = 2)
# We can remove the data without the year
df2 <- df1[!is.na(df1$year), ]
nrow(df1) - nrow(df2)
rm(df1)
# Check taxonomy
unique(df2[c(4:10, 12)])
# Plot occurrences
plot(balearic_bat.crop)
plot(balearic_shp[7], add = TRUE)
points(df2$decimalLongitude, df2$decimalLatitude, pch = 20)
# Extraction of depth for each records
depth2 <- data.frame(extract(x = balearic_bat,
y = df2[ ,c("decimalLongitude","decimalLatitude")]))
hist(depth2$bathymetry)
depth.kd <- density(depth2$bathymetry, na.rm = TRUE)
plot(depth.kd, col = "blue")
ggplot() +
geom_density(aes(x = depth2$bathymetry), fill = "blue", alpha = 0.5) +
theme_bw()
# Plot both taxa
plot(balearic_bat.crop)
plot(balearic_shp[1], add = TRUE)
points(df$decimalLongitude, df$decimalLatitude, pch = 20, col = "red")
points(df2$decimalLongitude, df2$decimalLatitude, pch = 20, col = "blue")
# Depth for both taxa
ggplot() +
geom_density(aes(x = depth$bathymetry), fill = "green", alpha = 0.5) +
geom_density(aes(x = depth2$bathymetry), fill = "blue", alpha = 0.5) +
theme_bw()
# Load a .csv file -------------------------------------------------------------
df3 <- read.csv("./occurrenceData/Podarcis.csv", sep = "\t")
head(df3)
str(df3)
# Count number of column and rows
ncol(df3)
nrow(df3)
# Check the year of the sampling campaign
sort(unique(df3$year)) # Increasing
# Check before if in the year columns there are NA values
length(which(is.na(df3$year)))
# !!!! In this case we have records without year information
# We can remove these data
df3 <- df3[!is.na(df3$year), ]
length(which(is.na(df3$year)))
# Count the number of records
barplot(table(df3$year), las = 2)
# Check taxonomy
unique(df3[c(4:10, 12)])
# We want only the occurrence at species level
df3 <- df3[df3$taxonRank == "SPECIES", ]
unique(df3[c(4:10, 12)])
# Plot occurrences
plot(balearic_bat.crop)
plot(balearic_shp[7], add = TRUE)
points(df3$decimalLongitude, df3$decimalLatitude, pch = 20, cex = 0.6)
# OPS.... we have a problem
# (length=4; order=xmin, xmax, ymin, ymax)
e.pit <- ext(1, 2, 38.5, 39.5)
balearic_bat.pit <- crop(balearic_bat, e.pit)
plot(balearic_bat.pit)
plot(balearic_shp[7], add = TRUE)
points(df3$decimalLongitude, df3$decimalLatitude, pch = 20, cex = 0.6)
# We need to remove the sea-records
# To do that we can mask the bathymetry to extract only the elevation
elevation <- mask(balearic_bat.crop, balearic_shp)
plot(elevation)
podarcis.elev <- data.frame(extract(x = elevation,
y = df3[ ,c("decimalLongitude","decimalLatitude")]))
head(podarcis.elev)
# NA values are those that fall into the sea.
length(which(is.na(podarcis.elev$bathymetry)))
# Add the elevation information in the main dataset
df3$elevationRaster <- podarcis.elev$bathymetry
head(df3)
# We can filter and remove the records containing NA values into the column elevationRaster
df3 <- df3[!is.na(df3$elevationRaster), ]
plot(balearic_bat.crop)
plot(balearic_shp[7], add = TRUE)
points(df3$decimalLongitude, df3$decimalLatitude, pch = 20, cex = 0.6)
# Remove record from Menorca
plot(balearic_bat.crop)
plot(balearic_shp[7], add = TRUE)
points(df3$decimalLongitude, df3$decimalLatitude, pch = 20, cex = 0.6)
abline(v = 4.08, h = 39.92, col = c("blue", "red"))
abline(v = 3.98, h = 39.98, col = c("purple", "orange"))
df3 <- df3[df3$decimalLongitude != 4.068106, ]
df3 <- df3[df3$decimalLongitude != 3.981433, ]
df3 <- df3[df3$decimalLongitude != 3.981236, ]
plot(balearic_bat.crop)
plot(balearic_shp[7], add = TRUE)
points(df3$decimalLongitude, df3$decimalLatitude, pch = 20, cex = 0.6)
# Plot taxa
plot(balearic_bat.crop)
plot(balearic_shp[7], add = TRUE)
points(df$decimalLongitude, df$decimalLatitude, pch = 20, col = "red", cex = 0.5)
points(df2$decimalLongitude, df2$decimalLatitude, pch = 20, col = "blue", cex = 0.5)
points(df3$decimalLongitude, df3$decimalLatitude, pch = 20, col = "purple", cex = 0.5)
# Depth/elevation taxa
ggplot() +
geom_density(aes(x = depth$bathymetry), fill = "green", alpha = 0.5) +
geom_density(aes(x = depth2$bathymetry), fill = "blue", alpha = 0.5) +
geom_density(aes(x = df3$elevationRaster), fill = "purple", alpha = 0.5) +
theme_bw()
getwd()
data.table::fread("./occurrenceData/whale_data.csv")
# data.table::fread("./occurrenceData/whale_data.csv")
head(df)
View(df)
str(df)
attach(df)
kingdom # If we want to see the kingdom column
unique(kingdom) # Unique values
detach(df)
kingdom # Try it...
df$kingdom
unique(df$kingdom)
ncol(df)
nrow(df)
unique(df$year)
sort(unique(df$year)) # Increasing
sort(unique(df$year), decreasing = TRUE) # Decreasing
is.na(df$year)
which(is.na(df$year))
table(df$year)
barplot(table(df$year))
colnames(df)
unique(df$kingdom)
unique(df$phylum)
unique(df$class)
unique(df$order)
unique(df$family)
unique(df$genus)
unique(df$species)
unique(df$taxonRank)
unique(df[c(4:10, 12)])
df.1 <- df
df.1$taxonRank[nrow(df.1)] <- "SUBSPECIES"
unique(df.1[c(4:10, 12)])
rm(df.1)
ls()
plot(df$decimalLongitude, df$decimalLatitude, pch = 20)
plot(df$decimalLongitude, df$decimalLatitude, pch = 20,
main = "Physeter macrocephalus gis points",
xlab = "Longitude", ylab = "Latitude")
balearic_bat <- rast("./geoData/GEBCO_06_Feb_2024_4cba6c55638e/gebco_2023.tif")
balearic_bat
# Change raster name
names(balearic_bat) <- "bathymetry"
balearic_bat
plot(balearic_bat)
points(df$decimalLongitude, df$decimalLatitude, pch = 20)
abline(v = c(0, 5), h = c(38, 41), col = c(rep("blue", 2), rep("red", 2)))
plot(balearic_bat.crop)
points(df$decimalLongitude, df$decimalLatitude, pch = 20)
plot(balearic_bat.crop, col = viridis::viridis_pal(option="D"))
plot(balearic_bat.crop, col = viridis::viridis_pal(option = "D")(255))
viridis::viridis_pal(option = "D")
viridis::viridis_pal(option = "D")(255)
plot(balearic_bat.crop, col = viridis::viridis_pal(option = "D")(25))
plot(balearic_bat.crop, col = viridis::viridis_pal(option = "D")(100))
plot(balearic_bat.crop, col = viridis::viridis_pal(option = "D")(10))
plot(balearic_bat.crop, col = viridis::viridis_pal(option = "M")(100))
plot(balearic_bat.crop, col = viridis::viridis_pal(option = "F")(100))
plot(balearic_bat.crop, col = viridis::viridis_pal(option = "D")(100))
# Load .shp file for balearic islands
balearic_shp <- st_read("./geoData/Balearic_Islands/Balearic_4326_simplified.shp")
plot(balearic_shp[7])
pdf("./Balearic_GIS.pdf",paper = "a4")
plot(balearic_shp[7])
dev.off()
pdf("./Balearic_GIS_2.pdf", paper = "a4r")
plot(balearic_shp[7])
dev.off()
plot(balearic_bat.crop)
plot(balearic_shp[7], add = TRUE)
points(df$decimalLongitude, df$decimalLatitude, pch = 20)
plot(balearic_bat.crop)
# plot(balearic_bat.crop, col = viridis::viridis_pal(option = "D")(100))
plot(balearic_shp[7], add = TRUE)
points(df$decimalLongitude, df$decimalLatitude, pch = 20)
plot(balearic_bat.crop, col = viridis::viridis_pal(option = "D")(100))
plot(balearic_shp[7], add = TRUE)
points(df$decimalLongitude, df$decimalLatitude, pch = 20)
depth <- data.frame(extract(x = balearic_bat,
y = df[ ,c("decimalLongitude","decimalLatitude")]))
hist(depth$bathymetry)
depth.kd <- density(depth$bathymetry, na.rm = TRUE)
plot(depth.kd, col = "green")
ggplot() +
geom_density(aes(x = depth$bathymetry), fill = "green", alpha = 0.5) +
theme_bw()
ggplot() +
geom_density(aes(x = depth$bathymetry), fill = "green", alpha = 0.5) +
xlab("Bathymetry") +
theme_bw()
pacman::p_load(phytools, phangorn, tidyverse)
setwd("~/Desktop/GitHub/Cursos/R/")
getwd()
# Load alignment file in fasta format ------------------------------------------
pleco <- read.phyDat("./Plecoptera_Nucleotide_alignment_500_6.fasta", format = "fasta")
pleco
names(pleco)
# Use grep to get indices of rows containing the specific string
matching_indices <- grep("Leuctra_digitata", names(pleco))
# Extract rows based on the matching indices
leuctra <- pleco[grep("Leuctra_digitata", names(pleco)), ]
for(i in 1:length(names(leuctra))){
names(leuctra)[i] <- paste0("Leuctra_digitata_", i)
}
coord <- read.csv("./leuctra.csv")
rownames(coord) <- coord$Taxa
coord <- coord[ ,-1]
colnames(coord)[2] <- "long"
coord <- as.matrix(coord)
head(coord)
dm  <- dist.ml(leuctra)
tree  <- upgma(dm)
plot(tree, cex = 0.4)
obj <- phylo.to.map(tree, coord, type = "phylogram",
plot = FALSE, direction = "rightwards")
plot(obj, ftype = "i", fsize = 0.3,  psize = 0.5,
xlim = c(-25, 45), ylim = c(35, 72))
plot(obj, direction="rightwards", ftype="i",fsize=0.4,map.bg="lightgreen",
lty="solid",colors="darkblue", delimit_map=TRUE, xlim = c(-25, 45), ylim = c(25, 72))
